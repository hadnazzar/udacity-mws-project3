class DBHelper{static DATABASE_URL(e){return`http://localhost:1337/${e}`}static changeRestaurantFavoriteStatus(e){var t=db.transaction(["restaurants"],"readwrite").objectStore("restaurants"),n=t.get(e.id);n.onsuccess=function(){var s=n.result;if(s.is_favorite){s.is_favorite=!1;let t=`http://localhost:1337/restaurants/${e.id}/?is_favorite=false`,n=document.getElementById(`favBtn-${e.id}`);n.innerHTML="Unfavorite",fetch(t,{method:"PUT"}).then(e=>e.json()),n.backgroundColor="orange"}else{s.is_favorite=!0;let t=`http://localhost:1337/restaurants/${e.id}/?is_favorite=false`,n=document.getElementById(`favBtn-${e.id}`);n.innerHTML="Favorite",fetch(t,{method:"PUT"}).then(e=>e.json()),n.backgroundColor="red"}var r=t.put(s);console.log("The transaction that originated this request is "+r.transaction),r.onsuccess=function(){updateRestaurants()}}}static changeReviewSuccessStatus(e){var t=db.transaction("reviews","readwrite").objectStore("reviews"),n=t.get(e.id);n.onsuccess=function(){var e=n.result;e.success=!0;var s=t.put(e);console.log("The transaction that originated this request is "+s.transaction),s.onsuccess=function(){}}}static addReviewToDB(e){fetch("http://localhost:1337/reviews/",{method:"POST",headers:{Accept:"application/json, text/plain, */*","Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>e.json()).catch(e=>{console.error(e)}).then(t=>{console.log(t);var n=db.transaction(["reviews"],"readwrite");n.oncomplete=function(e){console.log("complete")},n.onerror=function(e){console.log("error")};var s=n.objectStore("reviews");let r=t||{...e,success:!1};s.add(r).onsuccess=function(n){console.log("success"),fillReviewsHTML(),t||window.addEventListener("online",function(){DBHelper.postReview(e).then(e=>{console.log(e),DBHelper.changeReviewSuccessStatus(e)}),window.removeEventListener("online")})}})}static fetchRestaurants(e){var t=window.indexedDB.open("indexedDB",1);t.onerror=function(t){let n=new XMLHttpRequest;n.open("GET",DBHelper.DATABASE_URL("restaurants")),n.onload=(()=>{if(200===n.status){const t=JSON.parse(n.responseText);e(null,t)}else{const t=`Request failed. Returned status of ${n.status}`;e(t,null)}}),n.send()},t.onsuccess=function(t){db.transaction("restaurants").objectStore("restaurants").getAll().onsuccess=function(t){var n=t.target.result;if(n.length>0)e(null,n);else{let t=new XMLHttpRequest;t.open("GET",DBHelper.DATABASE_URL("restaurants")),t.onload=(()=>{if(200===t.status){const n=JSON.parse(t.responseText);e(null,n)}else{const n=`Request failed. Returned status of ${t.status}`;e(n,null)}}),t.send()}}}}static fetchReviews(e){var t=window.indexedDB.open("indexedDB",1);t.onerror=function(t){let n=new XMLHttpRequest;n.open("GET",DBHelper.DATABASE_URL("reviews")),n.onload=(()=>{if(200===n.status){const t=JSON.parse(n.responseText);e(null,t)}else{const t=`Request failed. Returned status of ${n.status}`;e(t,null)}}),n.send()},t.onsuccess=function(t){db.transaction("reviews").objectStore("reviews").getAll().onsuccess=function(t){var n=t.target.result;if(n.length>0)e(null,n);else{let t=new XMLHttpRequest;t.open("GET",DBHelper.DATABASE_URL("reviews")),t.onload=(()=>{if(200===t.status){const n=JSON.parse(t.responseText);e(null,n)}else{const n=`Request failed. Returned status of ${t.status}`;e(n,null)}}),t.send()}}}}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,s)=>{if(n)t(n,null);else{const n=s.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,s)=>{if(n)t(n,null);else{const n=s.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,s)=>{if(n)t(n,null);else{const n=s.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((s,r)=>{if(s)n(s,null);else{let s=r;"all"!=e&&(s=s.filter(t=>t.cuisine_type==e)),"all"!=t&&(s=s.filter(e=>e.neighborhood==t)),n(null,s)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),s=t.filter((e,n)=>t.indexOf(e)==n);e(null,s)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),s=t.filter((e,n)=>t.indexOf(e)==n);e(null,s)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/imgSrc/${e.photograph}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static postReview(e){return fetch("http://localhost:1337/reviews/",{method:"POST",headers:{Accept:"application/json, text/plain, */*","Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>e.json()).catch(e=>{console.error(e)})}}var request=window.indexedDB.open("indexedDB",1);request.onerror=function(e){alert("Database error: "+e.target.errorCode)},request.onsuccess=function(e){db=e.target.result},request.onupgradeneeded=function(e){var t=e.target.result,n=t.createObjectStore("restaurants",{keyPath:"id",autoIncrement:!0}),s=t.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0});n.transaction.addEventListener("complete",function(e){DBHelper.fetchRestaurants((e,n)=>{if(e)callback(e,null);else{var s=t.transaction("restaurants","readwrite").objectStore("restaurants");n.forEach(function(e){s.add(e)})}})}),s.transaction.addEventListener("complete",function(e){DBHelper.fetchReviews((e,n)=>{if(e)callback(e,null);else{var s=t.transaction("reviews","readwrite").objectStore("reviews");n.forEach(function(e){s.add(e)})}})})};